#!/usr/bin/python
# -*- coding: utf-8 -*-
# DPKG1 v0.3.0 , Collect debian packages with all dependencies
# Author: Mahdi Ghane.G

import os, sys, apt, argparse, platform, subprocess, __future__

try:
	#~~~ Define global vars
	THIS_PATH = os.path.dirname(os.path.abspath(__file__))
	OUTPUT_PATH = os.path.join(THIS_PATH, 'pkgs')
	APT_CACHE = apt.Cache()
	APT_PKG = None
	PKG_NAME = None
	PKG_ARCH = None
	PKG_PATH = None
	PKG_DIST = None
	DEPENDS = []
	DPKG_REPACK = os.path.join(THIS_PATH, 'dpkg-repack')
	DEBFOSTER_PATH = os.path.join(THIS_PATH, 'debfoster')
	
	
	#~~~ Make output folder
	if not os.path.exists(OUTPUT_PATH):
		os.makedirs(OUTPUT_PATH)



	#~~~ Define options
	parser = argparse.ArgumentParser()
	parser.add_argument('-c', help='Collect packages', nargs='*')
	parser.add_argument('-r', help='Make repository catalog', nargs='*')
	args = parser.parse_args()
	
	
	

	def get_pkg_fullname(pkg_name):
		cmd2 = "dpkg -l " + pkg_name + " | grep '^ii' "
		p2 = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE);
		path_output2 = p2.stdout.read().strip().split('\n')[0].split()
		dotdebname2 = ''
		if len(path_output2)>2:  
			splitted = path_output2[1].split(':')
			if len(splitted)>1:
				path_output2[1] = splitted[0]

			
			splitted2 = path_output2[2].split(':')
			if len(splitted2)>1:
				path_output2[2] = splitted2[1]

			
			dotdebname2 = path_output2[1]+'_'+path_output2[2]+'_'+path_output2[3]
		return dotdebname2

	
	
	
	def get_dependencies(pkg_name):
		cmd2 = DEBFOSTER_PATH + " -q -d " + pkg_name 
		p2 = subprocess.Popen(cmd2, shell=True, stdout=subprocess.PIPE);
		path_output2 = p2.stdout.read().split('\n', 1)[-1] # remove first line
		path_output2 = path_output2.strip().replace('\n','').split(' ')
		return path_output2
		
		

	#~~~ Collect packages
	if not args.c==None:
		PKG_DIST = platform.dist()[0]
		for PKG_NAME in args.c:
			### Check if package exits
			splitted = PKG_NAME.split(':')
			if len(splitted)>1:
				PKG_NAME = splitted[0]
				print("DPKG1:: explode package name `%s` " % PKG_NAME)
		
			if PKG_NAME in APT_CACHE and APT_CACHE[PKG_NAME].is_installed:
				APT_PKG = APT_CACHE[PKG_NAME]
				PKG_ARCH = APT_PKG.architecture()
				PKG_PATH = OUTPUT_PATH
				
				# make directories if not exist
				if not os.path.exists(PKG_PATH):
	    				os.makedirs(PKG_PATH)
	    				
				# chane working directory to selected directory
				os.chdir(PKG_PATH)
	
			
				# check package exists
				dotdebpath = PKG_PATH + '/' + get_pkg_fullname(PKG_NAME) + '.deb'
				if not os.path.exists(dotdebpath): # RePack if isnt packed already
					print("DPKG1:: repacking `%s` ..." % PKG_NAME )
					os.system("fakeroot -u "+DPKG_REPACK+" "+PKG_NAME)
				else:
					print("DPKG1:: ignore repacking, already exist's `%s`" % PKG_NAME )
				

				# parse dependencies
				for item in get_dependencies(PKG_NAME):
					if not item in DEPENDS:
						DEPENDS.append(item)
			
				
				
			else:
				print('DPKG1::ERROR:: `%s` Not installed' %  PKG_NAME)
		
		
	
		# repack dependenices
		print('DPKG1:: Dependency processing ...')
		for item in DEPENDS:
			dotdebpath2 = PKG_PATH + '/' + get_pkg_fullname(item) + '.deb'
			if not os.path.exists(dotdebpath2):
				print("DPKG1:: repacking (dependency) `%s` ..." % item )
				os.system("fakeroot -u " + DPKG_REPACK+" " + item)
			else:
				print("DPKG1:: ignore repacking, already exist's `%s`" % item )



	#~~~ Make repository
	if not args.r==None:
		
		if 'dpkg-dev' in APT_CACHE and APT_CACHE['dpkg-dev'].is_installed:
			if os.path.exists(OUTPUT_PATH):
				os.chdir(OUTPUT_PATH)
				os.system('dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz')
				print('Repository catalog created, now append pkgs folder path as repository like this: [deb file:'+ OUTPUT_PATH +' ./] in the end of: /etc/apt/sources.list')
		else:
			print('`dpkg-dev` not installed [sudo apt-get install dpkg-dev]')



except KeyboardInterrupt:
    print('Force exit, Keyboard interrupt!')
